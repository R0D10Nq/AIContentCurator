name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫–µ–Ω–¥–∞
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: –õ–∏–Ω—Ç–∏–Ω–≥ —Å flake8
      run: |
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å black
      run: |
        black --check backend/
        
    - name: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å isort
      run: |
        isort --check-only backend/
        
    - name: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      env:
        DATABASE_URL: sqlite:///./test.db
        SECRET_KEY: test-secret-key
        GEMINI_API_KEY: test-key
      run: |
        pytest backend/tests/ -v --cov=backend --cov-report=xml
        
    - name: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –≤ Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      working-directory: ./frontend
      run: npm ci
      
    - name: –õ–∏–Ω—Ç–∏–Ω–≥
      working-directory: ./frontend
      run: npm run lint
      
    - name: –°–±–æ—Ä–∫–∞
      working-directory: ./frontend
      run: npm run build
      
    - name: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      working-directory: ./frontend
      run: npm run test:unit

  # –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: –õ–æ–≥–∏–Ω –≤ Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/ai-content-curator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          
    - name: –°–±–æ—Ä–∫–∞ –∏ –ø—É—à
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # –î–µ–ø–ª–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏)
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /opt/ai-content-curator
          git pull origin main
          docker-compose pull
          docker-compose up -d --remove-orphans
          docker image prune -f

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      if: ${{ secrets.TELEGRAM_CHAT_ID }}
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_NOTIFICATION_TOKEN }}
        message: |
          üöÄ AI Content Curator –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!
          
          –ö–æ–º–º–∏—Ç: ${{ github.sha }}
          –ê–≤—Ç–æ—Ä: ${{ github.actor }}
          –°—Ç–∞—Ç—É—Å: ${{ job.status }}
          
          üåê https://your-domain.com
