"""
Telegram –±–æ—Ç –¥–ª—è AI Content Curator
"""

import asyncio
import logging
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    CallbackQueryHandler, ContextTypes, filters
)
import httpx
from backend.config import settings
from backend.database import SessionLocal
from backend.models import User, TelegramSession, Analysis
from backend.services.gemini_service import GeminiService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# API URL –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º
API_BASE_URL = "http://localhost:8000/api"


class AIContentCuratorBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.application = None
        self.gemini_service = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if not settings.TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini —Å–µ—Ä–≤–∏—Å
        try:
            self.gemini_service = GeminiService()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Gemini: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("connect", self.connect_command))
        self.application.add_handler(CommandHandler("disconnect", self.disconnect_command))
        self.application.add_handler(CommandHandler("analyze", self.analyze_command))
        self.application.add_handler(CommandHandler("history", self.history_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é Telegram
        await self.save_telegram_session(user)
        
        welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Content Curator Bot!

üî• –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–∏—Ö –≤—ã–∂–∏–º–æ–∫
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤

üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –ò–ò!

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="analyze_sentiment")],
            [InlineKeyboardButton("üìÑ –ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞", callback_data="analyze_summary")],
            [InlineKeyboardButton("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="analyze_keywords")],
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é", url="http://localhost:3000")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ AI Content Curator Bot - –ö–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/connect <username> - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫ Telegram
/disconnect - –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –æ—Ç Telegram
/analyze <—Ç–∏–ø> <—Ç–µ–∫—Å—Ç> - –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
/history - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã

üìù –¢–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ sentiment - –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ summary - –∫—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞  
‚Ä¢ keywords - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/analyze sentiment –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç!
/analyze summary –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è...

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞!
        """
        await update.message.reply_text(help_text)
    
    async def connect_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /connect"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /connect <username>"
            )
            return
        
        username = context.args[0]
        telegram_id = str(update.effective_user.id)
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –≤ –±–∞–∑–µ
        db = SessionLocal()
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
            user = db.query(User).filter(User.username == username).first()
            if not user:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                    "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ: http://localhost:3000/register"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.telegram_id = telegram_id
            db.commit()
            
            await update.message.reply_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç '{username}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram!\n"
                "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        finally:
            db.close()
    
    async def disconnect_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /disconnect"""
        telegram_id = str(update.effective_user.id)
        
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            if user:
                user.telegram_id = None
                db.commit()
                await update.message.reply_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω –æ—Ç Telegram")
            else:
                await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        finally:
            db.close()
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analyze <—Ç–∏–ø> <—Ç–µ–∫—Å—Ç>\n"
                "–¢–∏–ø—ã: sentiment, summary, keywords"
            )
            return
        
        analysis_type = context.args[0].lower()
        text = " ".join(context.args[1:])
        
        if analysis_type not in ["sentiment", "summary", "keywords"]:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: sentiment, summary, keywords"
            )
            return
        
        await self.perform_analysis(update, text, analysis_type)
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
        telegram_id = str(update.effective_user.id)
        
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            if not user:
                await update.message.reply_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect <username>"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã
            analyses = db.query(Analysis).filter(
                Analysis.user_id == user.id
            ).order_by(Analysis.created_at.desc()).limit(5).all()
            
            if not analyses:
                await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤")
                return
            
            history_text = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã:\n\n"
            for i, analysis in enumerate(analyses, 1):
                type_emoji = {
                    "sentiment": "üòä",
                    "summary": "üìÑ",
                    "keywords": "üîë"
                }.get(analysis.analysis_type, "üìä")
                
                history_text += f"{type_emoji} {i}. {analysis.analysis_type.title()}\n"
                history_text += f"üìù {analysis.original_text[:50]}...\n"
                history_text += f"üí° {analysis.result[:100]}...\n"
                history_text += f"üìÖ {analysis.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            await update.message.reply_text(history_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        finally:
            db.close()
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("analyze_"):
            analysis_type = query.data.replace("analyze_", "")
            context.user_data["waiting_for_text"] = analysis_type
            
            type_names = {
                "sentiment": "–∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
                "summary": "—Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∂–∏–º–∫–∏",
                "keywords": "–∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
            }
            
            await query.edit_message_text(
                f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è {type_names.get(analysis_type, '–∞–Ω–∞–ª–∏–∑–∞')}:"
            )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if "waiting_for_text" in context.user_data:
            analysis_type = context.user_data.pop("waiting_for_text")
            await self.perform_analysis(update, text, analysis_type)
            return
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        if len(text) > 20:
            keyboard = [
                [InlineKeyboardButton("üòä –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="analyze_sentiment")],
                [InlineKeyboardButton("üìÑ –ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞", callback_data="analyze_summary")],
                [InlineKeyboardButton("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="analyze_keywords")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üìù –ü–æ–ª—É—á–∏–ª –≤–∞—à —Ç–µ–∫—Å—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=reply_markup
            )
            context.user_data["last_text"] = text
        else:
            await update.message.reply_text(
                "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)"
            )
    
    async def perform_analysis(self, update: Update, text: str, analysis_type: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
        if not self.gemini_service:
            await update.message.reply_text(
                "‚ùå –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini API."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        status_message = await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            if analysis_type == "sentiment":
                result, confidence = await self.gemini_service.analyze_sentiment(text)
                emoji = "üòä"
                type_name = "–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
            elif analysis_type == "summary":
                result, confidence = await self.gemini_service.create_summary(text)
                emoji = "üìÑ"
                type_name = "–ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞"
            elif analysis_type == "keywords":
                result, confidence = await self.gemini_service.extract_keywords(text)
                emoji = "üîë"
                type_name = "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
            else:
                await status_message.edit_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω)
            await self.save_analysis(update.effective_user.id, text, analysis_type, result, confidence)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = f"{emoji} **{type_name}**\n\n"
            response_text += f"üìù **–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n{text[:200]}{'...' if len(text) > 200 else ''}\n\n"
            response_text += f"üí° **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n{result}\n\n"
            
            if confidence:
                response_text += f"üéØ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence}\n"
            
            response_text += "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!"
            
            await status_message.edit_text(response_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            await status_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def save_telegram_session(self, user):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        db = SessionLocal()
        try:
            session = db.query(TelegramSession).filter(
                TelegramSession.telegram_id == str(user.id)
            ).first()
            
            if not session:
                session = TelegramSession(
                    telegram_id=str(user.id),
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
                db.add(session)
            else:
                session.username = user.username
                session.first_name = user.first_name
                session.last_name = user.last_name
            
            db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        finally:
            db.close()
    
    async def save_analysis(self, telegram_user_id: int, text: str, analysis_type: str, result: str, confidence: Optional[float]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        db = SessionLocal()
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            user = db.query(User).filter(User.telegram_id == str(telegram_user_id)).first()
            if not user:
                return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏–∑–∞
            analysis = Analysis(
                user_id=user.id,
                original_text=text,
                analysis_type=analysis_type,
                result=result,
                confidence_score=str(confidence) if confidence else None
            )
            
            db.add(analysis)
            db.commit()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        finally:
            db.close()
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.initialize()
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        await self.application.run_polling()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = AIContentCuratorBot()
    await bot.run()


if __name__ == "__main__":
    asyncio.run(main())
